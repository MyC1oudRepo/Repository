# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: 'AWS-Terraform'
              backendAWSBucketName: 'uns3bucketdiana000'
              backendAWSKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: validate
            inputs:
              provider: 'aws'
              command: 'validate'
  - stage: tfdestroy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: destroy
        steps:
          - task: TerraformInstaller@1
            displayName: tfinstall
            inputs:
              terraformVersion: 'latest'
          - task: TerraformTaskV4@4
            displayName: init
            inputs:
              provider: 'aws'
              command: 'init'
              backendServiceAWS: 'AWS-Terraform'
              backendAWSBucketName: 'uns3bucketdiana000'
              backendAWSKey: 'terraform.tfstate'
          - task: TerraformTaskV4@4
            displayName: plan
            inputs:
              provider: 'aws'
              command: 'plan'
              environmentServiceNameAWS: 'AWS-Terraform'
          - task: TerraformTaskV4@4
            displayName: destroy
            inputs:
              provider: 'aws'
              command: 'destroy'
              environmentServiceNameAWS: 'AWS-Terraform'